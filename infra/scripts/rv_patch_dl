#!/usr/bin/env -S deno run --allow-net=api.github.com,raw.githubusercontent.com --allow-write=.
// vim: ft=typescript

if (Deno.args.length === 0) {
  console.error("No argument given, abort");
  Deno.exit(1);
}

const headers = {
  Accept: "application/vnd.github+json",
};

console.log("Fetching contents...");

const api_base = new URL(
  "https://api.github.com/repos/felixonmars/archriscv-packages/contents"
);

interface GitHubContentResponse {
  name: string;
  url: string;
  download_url: string;
  type: "dir" | "file";
}

const contents: GitHubContentResponse[] = await fetch(api_base, {
  headers: headers,
}).then((resp) => resp.json());

const target = Deno.args[0];
console.log(`Searching target ${target}...`);

const target_dir = contents
  .filter((elem) => elem.type === "dir")
  .find((elem) => elem.name === target);

if (target_dir === undefined) {
  console.error("Target not found");
  Deno.exit(1);
}

const patches_resp: GitHubContentResponse[] = await fetch(target_dir.url, {
  headers: headers,
}).then((resp) => resp.json());

console.log(
  `Target resolved, pending download: ${patches_resp.map((elem) => elem.name)}`
);

// allow download execute at the same time
const patches_dl_tasks = patches_resp.map((elem) =>
  (async () => {
    console.log(`    -> Try downloading file ${elem.name}`);
    const resp = await fetch(elem.download_url);
    if (resp.body) {
      const fd = await Deno.open(elem.name, { write: true, create: true });
      await resp.body.pipeTo(fd.writable);
    } else {
      throw Error(`No response when downloading file ${elem.name}`);
    }
  })()
);

await Promise.all(patches_dl_tasks);
console.log("Downloaded")
