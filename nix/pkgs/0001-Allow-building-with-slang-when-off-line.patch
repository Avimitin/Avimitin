From 27caad4e322fe613cb1ec41c048fcfd9c78744a2 Mon Sep 17 00:00:00 2001
From: Michal Sojka <michal.sojka@cvut.cz>
Date: Sun, 29 Oct 2023 14:26:29 +0100
Subject: [PATCH] Allow building with slang when off-line

When SLANG_DIR environment variable is defined, slang is not
downloaded and slang_wrapper is built against include files in the
SLANG_DIR directory.
---
 veridian-slang/build.rs | 24 +++++++++++++++---------
 1 file changed, 15 insertions(+), 9 deletions(-)

diff --git a/veridian-slang/build.rs b/veridian-slang/build.rs
index fbc4c27..febb6f5 100644
--- a/veridian-slang/build.rs
+++ b/veridian-slang/build.rs
@@ -16,16 +16,15 @@ fn download_slang() -> Result<(), Box<dyn std::error::Error>> {
     Ok(())
 }
 
-fn build_slang_wrapper() {
+fn build_slang_wrapper(slang_dir: &str) {
     cc::Build::new()
         .cpp(true)
         .flag("-std=c++17")
         .flag("-Wno-type-limits")
         .static_flag(true)
-        .include("slang_wrapper/slang/include")
+        .include(format!("{slang_dir}/include"))
         .file("slang_wrapper/src/slang_lib.cpp")
         .file("slang_wrapper/src/basic_client.cpp")
-        .out_dir("slang_wrapper/slang/lib")
         .compile("slangwrapper");
 }
 
@@ -34,9 +33,19 @@ fn main() {
     println!("cargo:rerun-if-changed=slang_wrapper/src/slang_wrapper.h");
     println!("cargo:rerun-if-changed=slang_wrapper/src/slang_lib.cpp");
 
-    download_slang().unwrap();
+    println!("cargo:rerun-if-env-changed=SLANG_DIR");
+    let slang_dir = match env::var("SLANG_DIR") {
+        Ok(dir) => dir,
+        Err(_) => {
+            download_slang().unwrap();
+            format!(
+                "{}/slang_wrapper/slang",
+                env::var("CARGO_MANIFEST_DIR").unwrap()
+            )
+        }
+    };
 
-    build_slang_wrapper();
+    build_slang_wrapper(&slang_dir);
 
     let bindings = bindgen::Builder::default()
         .clang_arg("-x")
@@ -46,10 +55,7 @@ fn main() {
         .generate()
         .expect("Unable to generate bindings");
 
-    println!(
-        "cargo:rustc-link-search=native={}/slang_wrapper/slang/lib",
-        env::var("CARGO_MANIFEST_DIR").unwrap()
-    );
+    println!("cargo:rustc-link-search=native={slang_dir}/lib");
     // println!("cargo:rustc-link-search=native=/usr/lib");
 
     println!("cargo:rustc-link-lib=static=slangwrapper");
-- 
2.42.0

